{"version":3,"sources":["../src/shared_promise.ts","../src/server.ts"],"sourcesContent":["export class AquiverPromise<T> {\r\n\r\n    resolve!: (value: T | PromiseLike<T>) => void;\r\n    reject!: (reason?: any) => void;\r\n    promise!: Promise<T>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise<T>((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}\r\n\r\nexport interface EventInfo {\r\n    env: \"browser\" | \"client\" | \"server\";\r\n}","import { AquiverPromise, EventInfo } from \"./shared_promise\";\r\n\r\ntype RemoteCallback = (args: any, info: ServerEventInfo) => any;\r\ntype EventCallback = (args: any, info: ServerEventInfo) => void;\r\n\r\ninterface ServerEventInfo extends EventInfo {\r\n    source?: number;\r\n}\r\n\r\nconst rp = new class ServerRPC {\r\n\r\n    #rpcListeners: Record<string, RemoteCallback> = {};\r\n    #pendings: Record<number, AquiverPromise<any>> = {}\r\n    #events: Record<string, Set<EventCallback>> = {}\r\n\r\n    #idCounter: number = 1;\r\n\r\n    constructor() {\r\n        onNet(\"rpc:TRIGGER_SERVER\", ({ eventName, args, ev }: { eventName: string; args?: any; ev: ServerEventInfo }) => {\r\n            const source = globalThis.source;\r\n            ev.source = Number(source);\r\n\r\n            this.#__trigger__(eventName, args, ev);\r\n        });\r\n\r\n        onNet(\"rpc:CALL_SERVER\", ({ eventName, args, id, ev }: { eventName: string; args?: any; id: number; ev: ServerEventInfo }) => {\r\n            const source = globalThis.source;\r\n\r\n            this.#__call__(eventName, args, { env: ev.env, source: source }).then(response => {\r\n                emitNet(\"rpc:CALL_SERVER_RESOLVE\", source, { response, id });\r\n            });\r\n        });\r\n\r\n        onNet(\"rpc:CALL_CLIENT_RESOLVE\", ({ response, id }) => {\r\n            const pendingPromise = this.#pendings[id];\r\n            if (pendingPromise instanceof AquiverPromise) {\r\n                pendingPromise.resolve(response);\r\n            }\r\n\r\n            if (this.#pendings[id]) {\r\n                delete this.#pendings[id];\r\n            }\r\n        });\r\n\r\n        const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(this));\r\n        methods.forEach(methodName => {\r\n            if (methodName.startsWith(\"constructor\")) return;\r\n\r\n            globalThis.exports(methodName, this[methodName].bind(this));\r\n        });\r\n    }\r\n\r\n    #getGlobalNamePrefix() {\r\n        return GetInvokingResource() || GetCurrentResourceName();\r\n    }\r\n\r\n    public onGlobal(eventName: string, cb: EventCallback) {\r\n        return this.#__on__(eventName + this.#getGlobalNamePrefix(), cb);\r\n    }\r\n\r\n    public on(eventName: string, cb: EventCallback) {\r\n        return this.#__on__(eventName, cb);\r\n    }\r\n\r\n    public offGlobal(eventName: string, cb: EventCallback) {\r\n        return this.#__off__(eventName + this.#getGlobalNamePrefix(), cb);\r\n    }\r\n\r\n    public off(eventName: string, cb: EventCallback) {\r\n        return this.#__off__(eventName, cb);\r\n    }\r\n\r\n    #__on__(eventName: string, cb: EventCallback) {\r\n        if (typeof cb !== \"function\") {\r\n            throw new Error(\"on event cb is not a function.\");\r\n        }\r\n\r\n        if (!this.#events[eventName]) {\r\n            this.#events[eventName] = new Set();\r\n        }\r\n\r\n        this.#events[eventName].add(cb);\r\n\r\n        return () => this.#__off__(eventName, cb);\r\n    }\r\n\r\n    #__off__(eventName: string, cb: EventCallback) {\r\n        if (typeof cb !== \"function\") {\r\n            throw new Error(\"off event cb is not a function.\");\r\n        }\r\n\r\n        if (!this.#events[eventName]) return false;\r\n\r\n        this.#events[eventName].delete(cb);\r\n\r\n        return true;\r\n    }\r\n\r\n    public triggerGlobal(eventName: string, args?: any) {\r\n        this.#__trigger__(eventName + this.#getGlobalNamePrefix(), args, { env: \"server\" });\r\n    }\r\n\r\n    /** Trigger a server event. */\r\n    public trigger(eventName: string, args?: any) {\r\n        this.#__trigger__(eventName, args, { env: \"server\" });\r\n    }\r\n\r\n    /** Backend function for triggering an event locally. Do not use if you dunno what you are doing. */\r\n    #__trigger__(eventName: string, args: any, ev: ServerEventInfo) {\r\n        const registeredEvents = this.#events[eventName];\r\n        if (!registeredEvents) return;\r\n\r\n        registeredEvents.forEach(a => {\r\n            a(args, ev);\r\n        });\r\n    }\r\n\r\n    #__register__(eventName: string, cb: RemoteCallback) {\r\n        if (typeof eventName !== \"string\" || typeof cb !== \"function\") {\r\n            throw new Error(\"registerGlobal eventName is not a string or cb is not a function.\");\r\n        }\r\n\r\n        if (this.#rpcListeners[eventName]) {\r\n            console.log(`register rpc ${eventName} already exist, it was overwritten.`);\r\n        }\r\n\r\n        this.#rpcListeners[eventName] = cb;\r\n\r\n        return () => this.unregister(eventName);\r\n    }\r\n\r\n    public registerGlobal(eventName: string, cb: RemoteCallback) {\r\n        return this.#__register__(eventName + this.#getGlobalNamePrefix(), cb);\r\n    }\r\n\r\n    /**\r\n     * Register an rpc.\r\n     * @returns the unregister function.\r\n     */\r\n    public register(eventName: string, cb: RemoteCallback) {\r\n        return this.#__register__(eventName, cb);\r\n    }\r\n\r\n    #__unregister__(eventName: string) {\r\n        if (!this.#rpcListeners[eventName]) return false;\r\n\r\n        console.log(`unregister ${eventName}`);\r\n\r\n        delete this.#rpcListeners[eventName];\r\n\r\n        return true;\r\n    }\r\n\r\n    public unregisterGlobal(eventName: string) {\r\n        return this.#__unregister__(eventName + this.#getGlobalNamePrefix());\r\n    }\r\n\r\n    /** Unregister an rpc. */\r\n    public unregister(eventName: string) {\r\n        return this.#__unregister__(eventName);\r\n    }\r\n\r\n    #__call__<T>(eventName: string, args: any, ev: ServerEventInfo): Promise<T> {\r\n        if (typeof this.#rpcListeners[eventName] !== \"function\") return Promise.reject(`Call event function does not exist: ${eventName}`);\r\n\r\n        return Promise.resolve(this.#rpcListeners[eventName](args, ev));\r\n    }\r\n\r\n    public callGlobal<T>(eventName: string, args?: any): Promise<T> {\r\n        return this.#__call__(eventName + this.#getGlobalNamePrefix(), args, { env: \"server\" });\r\n    }\r\n\r\n    /** Call an event locally. (Server<->Server) */\r\n    public call<T>(eventName: string, args?: any): Promise<T> {\r\n        return this.#__call__(eventName, args, { env: \"server\" });\r\n    }\r\n\r\n    #__callClient__(source: number, eventName: string, args?: any) {\r\n        const id = this.#generateId();\r\n\r\n        this.#pendings[id] = new AquiverPromise();\r\n\r\n        emitNet(\"rpc:CALL_CLIENT\", source, { eventName, args, id });\r\n\r\n        return this.#pendings[id].promise;\r\n    }\r\n\r\n    public callClientGlobal(source: number, eventName: string, args?: any) {\r\n        return this.#__callClient__(source, eventName + this.#getGlobalNamePrefix(), args);\r\n    }\r\n\r\n    public callClient(source: number, eventName: string, args?: any) {\r\n        return this.#__callClient__(source, eventName, args);\r\n    }\r\n\r\n    #__triggerClient__(source: number, eventName: string, args?: any) {\r\n        emitNet(\"rpc:TRIGGER_CLIENT\", source, { eventName, args });\r\n    }\r\n\r\n    public triggerClientGlobal(source: number, eventName: string, args?: any) {\r\n        this.#__triggerClient__(source, eventName + this.#getGlobalNamePrefix(), args);\r\n    }\r\n\r\n    public triggerClient(source: number, eventName: string, args?: any) {\r\n        this.#__triggerClient__(source, eventName, args);\r\n    }\r\n\r\n    #generateId() {\r\n        this.#idCounter++;\r\n        return this.#idCounter;\r\n    }\r\n}"],"mappings":"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","names":[]}